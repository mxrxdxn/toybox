(()=>{"use strict";var e=function(){var e;if("IntersectionObserver"in window){e=document.querySelectorAll("img[data-lazy]");var t=new IntersectionObserver((function(e){e.forEach((function(e){if(e.isIntersecting){var n=e.target;n.src=n.dataset.lazy,t.unobserve(n)}}))}));e.forEach((function(e){t.observe(e)}))}else{var n;e=document.querySelectorAll("img[data-lazy]");var r=function t(){n&&clearTimeout(n),n=setTimeout((function(){var n=window.pageYOffset;e.forEach((function(e){e.offsetTop<window.innerHeight+n&&(e.src=e.dataset.lazy)})),0===e.length&&(document.removeEventListener("scroll",t),window.removeEventListener("resize",t),window.removeEventListener("orientationChange",t))}),20)};document.addEventListener("scroll",r),window.addEventListener("resize",r),window.addEventListener("orientationChange",r)}},t=function(){var e;if("IntersectionObserver"in window){e=document.querySelectorAll("[data-lazy]:not(img)");var t=new IntersectionObserver((function(e){e.forEach((function(e){if(e.isIntersecting){var n=e.target;n.style.backgroundImage='url("'.concat(n.dataset.lazy,'")'),n.removeAttribute("data-lazy"),t.unobserve(n)}}))}));e.forEach((function(e){t.observe(e)}))}else{var n;e=document.querySelectorAll("[data-lazy]:not(img)");var r=function t(){n&&clearTimeout(n),n=setTimeout((function(){var n=window.pageYOffset;e.forEach((function(e){e.offsetTop<window.innerHeight+n&&(e.style.backgroundImage='url("'.concat(e.dataset.lazy,'")'),e.removeAttribute("data-lazy"))})),0===e.length&&(document.removeEventListener("scroll",t),window.removeEventListener("resize",t),window.removeEventListener("orientationChange",t))}),20)};document.addEventListener("scroll",r),window.addEventListener("resize",r),window.addEventListener("orientationChange",r)}},n=function(){var e;if("IntersectionObserver"in window){e=document.querySelectorAll("[data-lazy-css]");var t=new IntersectionObserver((function(e){e.forEach((function(e){if(e.isIntersecting){var n=e.target,r=document.createElement("link");r.setAttribute("rel","stylesheet"),r.setAttribute("href",n.dataset.lazyCss),document.querySelector("head").appendChild(r),t.unobserve(n)}}))}));e.forEach((function(e){t.observe(e)}))}else{var n;e=document.querySelectorAll("[data-lazy-css]");var r=function t(){n&&clearTimeout(n),n=setTimeout((function(){var n=window.pageYOffset;e.forEach((function(e){if(e.offsetTop<window.innerHeight+n){var t=document.createElement("link");t.setAttribute("rel","stylesheet"),t.setAttribute("href",e.dataset.lazyCss),document.querySelector("head").appendChild(t)}})),0===e.length&&(document.removeEventListener("scroll",t),window.removeEventListener("resize",t),window.removeEventListener("orientationChange",t))}),20)};document.addEventListener("scroll",r),window.addEventListener("resize",r),window.addEventListener("orientationChange",r)}},r=function(){var e;if("IntersectionObserver"in window){e=document.querySelectorAll("[data-lazy-js]");var t=new IntersectionObserver((function(e){e.forEach((function(e){if(e.isIntersecting){var n=e.target,r=document.createElement("script");r.setAttribute("src",n.dataset.lazyJs),document.querySelector("head").appendChild(r),t.unobserve(n)}}))}));e.forEach((function(e){t.observe(e)}))}else{var n;e=document.querySelectorAll("[data-lazy-js]");var r=function t(){n&&clearTimeout(n),n=setTimeout((function(){var n=window.pageYOffset;e.forEach((function(e){if(e.offsetTop<window.innerHeight+n){var t=document.createElement("script");t.setAttribute("src",e.dataset.lazyJs),document.querySelector("head").appendChild(t)}})),0===e.length&&(document.removeEventListener("scroll",t),window.removeEventListener("resize",t),window.removeEventListener("orientationChange",t))}),20)};document.addEventListener("scroll",r),window.addEventListener("resize",r),window.addEventListener("orientationChange",r)}};window.addEventListener("load",(function(){!function(){var o=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];!0===(!(arguments.length>0&&void 0!==arguments[0])||arguments[0])&&e(),!0===o&&t(),!0===i&&n(),!0===a&&r()}()}))})();